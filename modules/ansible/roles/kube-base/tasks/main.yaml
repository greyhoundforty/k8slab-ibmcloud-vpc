# Load kernel modules
- name: Add overlay module with persistence
  community.general.modprobe:
    name: overlay
    state: present
    persistent: present
  register: overlay_module
  changed_when: overlay_module is changed

- name: Add br_netfilter module with persistence
  community.general.modprobe:
    name: br_netfilter
    state: present
    persistent: present
  register: br_netfilter_module
  changed_when: br_netfilter_module is changed

# Set system parameters
- name: Set net.ipv4.ip_forward
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: true
    state: present
    reload: true
  register: ip_forward_set
  changed_when: ip_forward_set is changed

- name: Set net.bridge.bridge-nf-call-iptables
  ansible.posix.sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: '1'
    sysctl_set: true
    state: present
    reload: true
  register: bridge_nf_call_set
  changed_when: bridge_nf_call_set is changed

- name: Update CA certificates
  ansible.builtin.command: update-ca-certificates
  register: ca_certificates_update
  changed_when: false

# Create containerd directory if it doesn't exist
- name: Create /etc/containerd
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    owner: root
    group: root
    mode: '0755'
  register: containerd_dir
  changed_when: containerd_dir is changed

# Check if containerd is already installed
- name: Check if containerd is already installed
  ansible.builtin.stat:
    path: /usr/local/bin/containerd
  register: containerd_binary

# Install containerd only if not already installed
- name: Download containerd
  ansible.builtin.get_url:
    url: https://github.com/containerd/containerd/releases/download/v2.0.3/containerd-2.0.3-linux-amd64.tar.gz
    dest: /tmp/containerd.tar.gz
    mode: '0755'
  when: not containerd_binary.stat.exists
  register: containerd_download
  changed_when: containerd_download is changed

- name: Extract containerd
  ansible.builtin.unarchive:
    src: /tmp/containerd.tar.gz
    dest: /usr/local/
    remote_src: true
  when: not containerd_binary.stat.exists
  register: containerd_extracted
  changed_when: containerd_extracted is changed

# Check if containerd service exists
- name: Check if containerd service file exists
  ansible.builtin.stat:
    path: /usr/lib/systemd/system/containerd.service
  register: containerd_service_file

# Setup containerd service if not already set up
- name: Download containerd systemd service
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
    dest: /usr/lib/systemd/system/containerd.service
    mode: '0755'
  when: not containerd_service_file.stat.exists
  register: containerd_service_download
  changed_when: containerd_service_download is changed

- name: Enable systemd containerd
  ansible.builtin.systemd_service:
    name: containerd
    state: "started"
    enabled: true
    masked: false
  register: containerd_service_enabled
  changed_when: containerd_service_enabled is changed

# Check if containerd config exists
- name: Check if containerd config exists
  ansible.builtin.stat:
    path: /etc/containerd/config.toml
  register: containerd_config_file

# Generate containerd config if it doesn't exist
- name: Generate containerd config
  ansible.builtin.shell: containerd config default > /etc/containerd/config.toml
  when: not containerd_config_file.stat.exists
  changed_when: true

# Check if runc is already installed
- name: Check if runc is already installed
  ansible.builtin.stat:
    path: /usr/local/sbin/runc
  register: runc_binary

# Install runc only if not already installed
- name: Download runc
  ansible.builtin.get_url:
    url: https://github.com/opencontainers/runc/releases/download/v1.3.0-rc.1/runc.amd64
    dest: /tmp/runc.amd64
    mode: '0755'
  when: not runc_binary.stat.exists
  register: runc_download
  changed_when: runc_download is changed

- name: Install runc
  ansible.builtin.shell: install -m 755 /tmp/runc.amd64 /usr/local/sbin/runc
  when: not runc_binary.stat.exists
  changed_when: true

# Create CNI directory if it doesn't exist
- name: Create /opt/cni/bin
  ansible.builtin.file:
    path: /opt/cni/bin
    state: directory
    owner: root
    group: root
    mode: '0755'
  register: cni_dir
  changed_when: cni_dir is changed

# Check if CNI plugins are installed
- name: Check if CNI plugins are already installed
  ansible.builtin.stat:
    path: /opt/cni/bin/bridge
  register: cni_plugins

# Install CNI plugins only if not already installed
- name: Download CNI plugins
  ansible.builtin.get_url:
    url: https://github.com/containernetworking/plugins/releases/download/v1.6.2/cni-plugins-linux-amd64-v1.6.2.tgz
    dest: /tmp/cni-plugins-linux-amd64-v1.6.2.tgz
    mode: '0755'
  when: not cni_plugins.stat.exists
  register: cni_download
  changed_when: cni_download is changed

- name: Extract CNI plugin drivers
  ansible.builtin.unarchive:
    src: /tmp/cni-plugins-linux-amd64-v1.6.2.tgz
    dest: /opt/cni/bin
    remote_src: true
  when: not cni_plugins.stat.exists
  changed_when: true

# Check if Kubernetes repo is already added
- name: Check if Kubernetes repo exists
  ansible.builtin.stat:
    path: /etc/apt/sources.list.d/kubernetes.list
  register: kubernetes_repo

# Add Kubernetes repo if not already added
- name: Add Kubernetes APT repository
  ansible.builtin.deb822_repository:
    name: kubernetes
    types: [deb]
    uris: "https://pkgs.k8s.io/core:/stable:/v1.32/deb/"
    signed_by: "https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key"
    suites: [/]
    state: present
    enabled: true
  when: not kubernetes_repo.stat.exists
  register: kubernetes_repo_added
  changed_when: kubernetes_repo_added is changed

# Update apt cache after adding repo
- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
  when: kubernetes_repo_added is changed
  changed_when: false

# Check if kubernetes components are installed
- name: Check if kubelet is installed
  ansible.builtin.dpkg_selections:
    name: kubelet
    selection: hold
  register: kubelet_installed
  ignore_errors: true
  changed_when: false

# Install kube packages if not already installed
- name: Install kube packages
  ansible.builtin.apt:
    pkg:
      - kubelet
      - kubeadm
      - kubectl
  when: kubelet_installed is failed or (kubelet_installed is succeeded and kubelet_installed.get('selection', '') != "hold")
  register: kube_packages_installed
  changed_when: kube_packages_installed is changed

# # Pin kubernetes components
# - name: Pin kubelet
#   ansible.builtin.dpkg_selections:
#     name: kubelet
#     selection: hold
#   changed_when: false

# - name: Pin kubeadm
#   ansible.builtin.dpkg_selections:
#     name: kubeadm
#     selection: hold
#   changed_when: false

# - name: Pin kubectl
#   ansible.builtin.dpkg_selections:
#     name: kubectl
#     selection: hold
#   changed_when: false

# Reload systemd
- name: Reload systemd
  ansible.builtin.systemd_service:
    daemon_reload: true
  changed_when: false

# Enable kubelet
- name: Enable systemd kubelet
  ansible.builtin.systemd_service:
    name: kubelet
    state: "started"
    enabled: true
    masked: false
  register: kubelet_enabled
  changed_when: kubelet_enabled is changed
