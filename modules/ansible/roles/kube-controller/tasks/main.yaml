--- 
# Check if kubeadm is initialized
- name: Check if kubeadm is initialized
  ansible.builtin.command: kubectl cluster-info
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  register: kubernetes_status
  ignore_errors: true
  changed_when: false

# Initialize kubeadm if not already initialized
- name: Initialize kubeadm
  ansible.builtin.command: kubeadm init --pod-network-cidr=172.16.0.0/16 --v=5
  when: kubernetes_status.rc != 0
  changed_when: kubernetes_status.rc != 0
  register: kubeadm_init_result

# Debug kubeadm init result
- name: Debug kubeadm init output
  debug:
    var: kubeadm_init_result
  when: kubeadm_init_result.changed | default(false)

# Check for admin.conf in various locations
- name: Check if admin.conf exists in /etc/kubernetes
  ansible.builtin.stat:
    path: /etc/kubernetes/admin.conf
  register: admin_conf_kubernetes

- name: Debug admin.conf check
  debug: 
    msg: "admin.conf exists in /etc/kubernetes: {{ admin_conf_kubernetes.stat.exists | default(false) }}"

- name: Check if admin.conf exists in /root/.kube
  ansible.builtin.stat:
    path: /root/.kube/config
  register: admin_conf_root

- name: Debug root .kube/config check
  debug: 
    msg: "admin.conf exists in /root/.kube/config: {{ admin_conf_root.stat.exists | default(false) }}"

# List Kubernetes directory contents
- name: List Kubernetes directory contents
  ansible.builtin.command: ls -la /etc/kubernetes/
  register: kubernetes_dir_contents
  changed_when: false

- name: Debug kubernetes directory contents
  debug:
    var: kubernetes_dir_contents.stdout_lines

# Generate the join command
- name: Generate the kubeadm join command
  ansible.builtin.command: kubeadm token create --print-join-command
  register: join_command
  changed_when: false

# Store the join command for later use
- name: Store the join command
  ansible.builtin.set_fact:
    kubeadm_join_cmd: "{{ join_command.stdout }}"

# Create .kube directory on bastion using command module
- name: Ensure .kube directory exists on bastion
  ansible.builtin.command: ssh root@{{ hostvars['bastion-host']['ansible_host'] }} "mkdir -p /root/.kube"
  when: inventory_hostname == groups['controllers'][0]
  changed_when: false
  
# Use scp to directly copy the admin.conf file from controller to bastion
- name: Copy admin.conf to bastion using scp
  ansible.builtin.command: scp -o StrictHostKeyChecking=no /etc/kubernetes/admin.conf root@{{ hostvars['bastion-host']['ansible_host'] }}:/root/.kube/config
  when: inventory_hostname == groups['controllers'][0]
  register: scp_result
  changed_when: scp_result.rc == 0

# Verify the file was copied correctly
- name: Verify kubeconfig was copied to bastion
  ansible.builtin.command: ssh root@{{ hostvars['bastion-host']['ansible_host'] }} "ls -la /root/.kube/config"
  when: inventory_hostname == groups['controllers'][0]
  register: verify_result
  changed_when: false
  
# Debug the verification result
- name: Debug verification result
  debug:
    var: verify_result
  when: inventory_hostname == groups['controllers'][0]

# Keep original backup by fetching from controller
- name: Also copy kubeconfig to local directory for backup
  ansible.builtin.fetch:
    src: /etc/kubernetes/admin.conf
    dest: "{{ playbook_dir }}/admin.conf.backup"
    flat: true
  changed_when: false
  when: inventory_hostname == groups['controllers'][0]

# Check if calico is already applied
- name: Check if calico is already deployed
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  ansible.builtin.command: kubectl get pods -n kube-system -l k8s-app=calico-node --no-headers
  register: calico_check
  ignore_errors: true
  changed_when: false

# Download calico manifest
- name: Download calico manifest
  ansible.builtin.get_url:
    url: https://docs.projectcalico.org/manifests/calico.yaml
    dest: /tmp/calico.yaml
    mode: '0755'
  when: calico_check.rc != 0 or calico_check.stdout == ""

# Apply calico if not already applied
- name: Apply calico
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  ansible.builtin.command: kubectl apply -f /tmp/calico.yaml
  register: calico_apply_result
  when: calico_check.rc != 0 or calico_check.stdout == ""
  changed_when: "'configured' in calico_apply_result.stdout or 'created' in calico_apply_result.stdout"

# Wait for calico to be ready
- name: Wait for calico to be ready
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  ansible.builtin.command: kubectl get pods -n kube-system -l k8s-app=calico-node -o jsonpath='{.items[0].status.containerStatuses[0].ready}'
  register: calico_status
  until: calico_status.stdout == "true"
  retries: 10
  delay: 5
  changed_when: false

